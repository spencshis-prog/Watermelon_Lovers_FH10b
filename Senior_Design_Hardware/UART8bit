// ----------------------------------------------------------------------------
// 
// File name:     Lab5.c
//
// ----------------------------------------------------------------------------
//
// Description:   This lab is designed to be used on the new Lab Board 
// Author:        Mark McDermott and Jon Valvano
// Orig gen date: August 4, 2024
// 
// Goal of this lab: Audio Communication
//

// ----------------------------------------------------------------------------
// Hardware/software assigned to common
// main initialization initializes all modules
//   PD2, Timer5A, ADC1, UART0 implements TExaSdisplay
// ----------------------------------------------------------------------------
// Hardware/software assigned to transmitter
//   UART0, possible source of input data (conflicts with TExaSdisplay)
//   PC7-PC4 Port_C_Init, possible source of input data
//   Timer0A periodic interrupt to generate input
//   Fifo1 linkage from Input to Encoder
//   Timer1A periodic interrupt create a sequence of frequencies
//   Fifo2 linkage from  Encoder to DAC
//   SSI1 PD3 PD1 PD0 TLV5616 DAC output
//   SysTick ISR output to DAC
// ----------------------------------------------------------------------------
// Hardware/software assigned to reciever
//   Timer2A ADC0 samples sound
//   Fifo3 linkage from  ADC to Decoder
//   main-loop runs decoder
//   PE3 PF3, PF2, PF1, LEDs
//   PA2-PA7, SSI0, ST7735R

#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"
#include "../inc/Texas.h"
#include "../inc/PLL.h"
#include "../inc/ST7735.h"
#include "../inc/Timer0A.h"
#include "../inc/Timer1A.h"
#include "Receiver.h"
#include "Transmitter.h"
#include "../inc/dsp.h"
#include "../inc/TLV5616.h"
#include "switch.h"
#include "../inc/fifo.h"
#include "UART.h"




void DisableInterrupts(void);           // Disable interrupts
void EnableInterrupts(void);            // Enable interrupts
void Port_Init(void);
void Delay(int ms);

void micInput(void);
void switchExamine(void);



int32_t outputADC, dataRx;

int sampleMic = 0;




uint8_t ADC_Array[14100];
int ADC_Index = 0;
int ADC_Index_Offload = 0;
int ADC_Flag_Stop = 0;
int PFone_pressed = 0;
int sampeling_array_index = 0;



int main(void){
  DisableInterrupts();
  PLL_Init(Bus80MHz);    // bus clock at 80 MHz
  // write this
	DAC_Init(0);
	Switch_Init();
	//Port_Init();
	DFT_Init();
	//Output_Init();
	ADC_Init();
	UART_Init();  // to print the PMF
	UART_InitA();  // to print the PMF
  SysTick_Init(2500);
	Timer0A_Init(&micInput,  5000, 1);
	Timer1A_Init(&switchExamine, 20000000, 4);
  EnableInterrupts();
  while(1){
      // write this
		
  }
}


int z = 0;
int t=0 ;
void switchExamine(void){
	
			
	if((GPIO_PORTF_DATA_R & 0x01) == 0x0){
		
		Delay(500);
		//GPIO_PORTC_DATA_R = 0x40;
		
		if(PFone_pressed != 1){
			PFone_pressed = 1;
		}
			
			//sampleMic = 1;
		
	}else{
		PFone_pressed = 0;
	}
	
	if(PFone_pressed == 1 && sampeling_array_index !=0){
		GPIO_PORTC_DATA_R = GPIO_PORTC_DATA_R ^ 0x40;
		while(z < sampeling_array_index){
			UART_OutUDec(ADC_Array[z]);
			UART_OutChar(CR); UART_OutChar(LF);
			z++;
			
		}
		z=0;
		sampeling_array_index=0;
		t=0;
		PFone_pressed = 0;
			
		
	}else{
		GPIO_PORTC_DATA_R = GPIO_PORTC_DATA_R & 0xBF;  //Debugging LED
	}
		
		
	
	
	
}


void micInput(void){
	//DisableInterrupts();
	GPIO_PORTC_DATA_R = GPIO_PORTC_DATA_R ^ 0x80; //Debugging LED
	
		
	if(((GPIO_PORTF_DATA_R & 0x10) == 0x0) && (sampeling_array_index < 30000)){
			if(t <=20000){
				t++;
				return;
			}
			outputADC = ADC_In();
			ADC_Array[sampeling_array_index] = NoiseReject(outputADC) >> 4;
			sampeling_array_index++;
			GPIO_PORTC_DATA_R = GPIO_PORTC_DATA_R | 0x20;   //Debugging LED
	}else{
		GPIO_PORTC_DATA_R = (GPIO_PORTC_DATA_R & 0xDF);   //Debugging LED
	}
	
	
	//EnableInterrupts();
	
	
}

		



void Delay(int ms){
	while(ms > 0) {
        ms--;
    }
}


