import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.resnet50 import preprocess_input
import numpy as np
import sys
import os

# ========== Configuration ==========
MODEL_PATH = "vis_model.keras"  # Path to your saved model
IMAGE_SIZE = (1080, 1080)       # Image input size for ResNet50

# ========== Preprocessing Function ==========
def preprocess_image(filepath):
    """
    Loads and preprocesses an image for ResNet50 model prediction.

    Args:
        filepath (str): Path to the image file.

    Returns:
        np.ndarray: Preprocessed image with shape (1, 1080, 1080, 3)
    """
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"Image not found: {filepath}")
    
    img = image.load_img(filepath, target_size=IMAGE_SIZE)
    img_array = image.img_to_array(img)
    img_array = preprocess_input(img_array)  # Converts RGB to BGR + subtracts mean
    img_batch = np.expand_dims(img_array, axis=0)
    return img_batch

# ========== Prediction ==========
def predict_brix(image_path):
    """
    Loads the model and predicts the Brix value for a given image.
    
    Args:
        image_path (str): Path to the input image.

    Returns:
        float: Predicted Brix value.
    """
    # Load model
    model = tf.keras.models.load_model(MODEL_PATH)
    
    # Preprocess image
    img_batch = preprocess_image(image_path)

    # Run prediction
    prediction = model.predict(img_batch)
    return prediction[0][0]

# ========== Run from CLI ==========
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python predict_brix.py <image_path>")
        sys.exit(1)

    image_path = sys.argv[1]
    brix = predict_brix(image_path)
    print(f"Predicted Brix: {brix:.2f}")
